# Generated by Django 5.1.6 on 2025-05-01 13:34

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="AboutPageContent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
                (
                    "intro_text",
                    models.TextField(
                        help_text="Introduction text at the top of the About page"
                    ),
                ),
                ("sales_title", models.CharField(default="Sales", max_length=100)),
                (
                    "sales_content",
                    models.TextField(help_text="Content for the Sales section"),
                ),
                (
                    "sales_image",
                    models.FileField(
                        blank=True,
                        help_text="Image for the Sales section",
                        null=True,
                        upload_to="about/",
                    ),
                ),
                ("service_title", models.CharField(default="Service", max_length=100)),
                (
                    "service_content",
                    models.TextField(help_text="Content for the Service section"),
                ),
                (
                    "service_image",
                    models.FileField(
                        blank=True,
                        help_text="Image for the Service section",
                        null=True,
                        upload_to="about/",
                    ),
                ),
                (
                    "parts_title",
                    models.CharField(default="Parts & Accessories", max_length=100),
                ),
                (
                    "parts_content",
                    models.TextField(
                        help_text="Content for the Parts & Accessories section"
                    ),
                ),
                (
                    "parts_image",
                    models.FileField(
                        blank=True,
                        help_text="Image for the Parts section",
                        null=True,
                        upload_to="about/",
                    ),
                ),
                (
                    "cta_text",
                    models.TextField(
                        help_text="Call to action text at the bottom of the page"
                    ),
                ),
            ],
            options={
                "verbose_name": "About Page Content",
                "verbose_name_plural": "About Page Content",
            },
        ),
        migrations.CreateModel(
            name="MotorcycleCondition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=20, unique=True)),
                ("display_name", models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name="ServiceType",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "estimated_duration",
                    models.DurationField(
                        help_text="Estimated time to complete this service"
                    ),
                ),
                ("base_price", models.DecimalField(decimal_places=2, max_digits=8)),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Whether this service is currently offered",
                    ),
                ),
                (
                    "image",
                    models.FileField(
                        blank=True,
                        help_text="Icon image for this service type",
                        null=True,
                        upload_to="service_types/",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="SiteSettings",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "enable_sales_new",
                    models.BooleanField(
                        default=True, help_text="Enable new motorcycle sales"
                    ),
                ),
                (
                    "enable_sales_used",
                    models.BooleanField(
                        default=True, help_text="Enable used motorcycle sales"
                    ),
                ),
                (
                    "enable_hire",
                    models.BooleanField(
                        default=True, help_text="Enable motorcycle hire services"
                    ),
                ),
                (
                    "enable_service_booking",
                    models.BooleanField(
                        default=True, help_text="Enable service booking functionality"
                    ),
                ),
                (
                    "enable_user_accounts",
                    models.BooleanField(
                        default=True, help_text="Enable user account registration"
                    ),
                ),
                (
                    "enable_contact_page",
                    models.BooleanField(
                        default=True, help_text="Enable the contact us page"
                    ),
                ),
                (
                    "enable_about_page",
                    models.BooleanField(
                        default=True, help_text="Enable the about us page"
                    ),
                ),
                (
                    "enable_map_display",
                    models.BooleanField(
                        default=True,
                        help_text="Enable displaying a map (e.g., location map)",
                    ),
                ),
                (
                    "enable_featured_section",
                    models.BooleanField(
                        default=True,
                        help_text="Enable a featured items or content section",
                    ),
                ),
                (
                    "enable_privacy_policy_page",
                    models.BooleanField(
                        default=True, help_text="Enable the privacy policy page"
                    ),
                ),
                (
                    "enable_returns_page",
                    models.BooleanField(
                        default=True, help_text="Enable the returns page"
                    ),
                ),
                (
                    "enable_security_page",
                    models.BooleanField(
                        default=True, help_text="Enable the security page"
                    ),
                ),
                (
                    "enable_terms_page",
                    models.BooleanField(
                        default=True, help_text="Enable the terms and conditions page"
                    ),
                ),
                (
                    "allow_anonymous_bookings",
                    models.BooleanField(
                        default=True,
                        help_text="Allow service bookings without an account",
                    ),
                ),
                (
                    "allow_account_bookings",
                    models.BooleanField(
                        default=True, help_text="Allow service bookings with an account"
                    ),
                ),
                (
                    "booking_open_days",
                    models.IntegerField(
                        default=60,
                        help_text="Number of days in advance that bookings can be made",
                    ),
                ),
                (
                    "booking_start_time",
                    models.TimeField(
                        default=datetime.time(9, 0),
                        help_text="Earliest time of day for service bookings (e.g., 09:00)",
                    ),
                ),
                (
                    "booking_end_time",
                    models.TimeField(
                        default=datetime.time(17, 0),
                        help_text="Latest time of day for service bookings (e.g., 17:00)",
                    ),
                ),
                (
                    "booking_advance_notice",
                    models.IntegerField(
                        default=1,
                        help_text="Minimum number of days notice required for a booking",
                    ),
                ),
                (
                    "max_visible_slots_per_day",
                    models.IntegerField(
                        default=6,
                        help_text="Maximum number of booking slots to show per day",
                    ),
                ),
                (
                    "service_confirmation_email_subject",
                    models.CharField(
                        default="Your service booking has been confirmed",
                        max_length=200,
                    ),
                ),
                (
                    "service_pending_email_subject",
                    models.CharField(
                        default="Your service booking request has been received",
                        max_length=200,
                    ),
                ),
                (
                    "admin_service_notification_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email address for service booking notifications",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "minimum_hire_duration_days",
                    models.IntegerField(
                        default=1, help_text="Minimum number of days for a hire booking"
                    ),
                ),
                (
                    "maximum_hire_duration_days",
                    models.IntegerField(
                        default=30,
                        help_text="Maximum number of days for a hire booking",
                    ),
                ),
                (
                    "hire_booking_advance_notice",
                    models.IntegerField(
                        default=1,
                        help_text="Minimum number of days notice required for a hire booking",
                    ),
                ),
                (
                    "default_hire_deposit_percentage",
                    models.DecimalField(
                        decimal_places=2,
                        default=25.0,
                        help_text="Default deposit percentage for hire bookings",
                        max_digits=5,
                    ),
                ),
                (
                    "hire_confirmation_email_subject",
                    models.CharField(
                        default="Your motorcycle hire booking has been confirmed",
                        max_length=200,
                    ),
                ),
                (
                    "admin_hire_notification_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email address for hire booking notifications",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "display_new_prices",
                    models.BooleanField(
                        default=True, help_text="Display prices for new motorcycles"
                    ),
                ),
                (
                    "display_used_prices",
                    models.BooleanField(
                        default=True, help_text="Display prices for used motorcycles"
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True, default="(08) 9433 4613", max_length=20, null=True
                    ),
                ),
                (
                    "email_address",
                    models.EmailField(
                        blank=True,
                        default="admin@scootershop.com.au",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "storefront_address",
                    models.TextField(
                        blank=True,
                        default="Unit 2/95 Queen Victoria St, Fremantle WA, Australia",
                        null=True,
                    ),
                ),
                (
                    "opening_hours_monday",
                    models.CharField(
                        blank=True,
                        default="10:30am to 5:00pm",
                        help_text="e.g. '9:00 AM - 5:00 PM' or 'Closed'",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "opening_hours_tuesday",
                    models.CharField(
                        blank=True,
                        default="10:30am to 5:00pm",
                        help_text="e.g. '9:00 AM - 5:00 PM' or 'Closed'",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "opening_hours_wednesday",
                    models.CharField(
                        blank=True,
                        default="10:30am to 5:00pm",
                        help_text="e.g. '9:00 AM - 5:00 PM' or 'Closed'",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "opening_hours_thursday",
                    models.CharField(
                        blank=True,
                        default="10:30am to 5:00pm",
                        help_text="e.g. '9:00 AM - 5:00 PM' or 'Closed'",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "opening_hours_friday",
                    models.CharField(
                        blank=True,
                        default="10:30am to 5:00pm",
                        help_text="e.g. '9:00 AM - 5:00 PM' or 'Closed'",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "opening_hours_saturday",
                    models.CharField(
                        blank=True,
                        default="10:30am to 1:00pm (By Appointment only)",
                        help_text="e.g. '9:00 AM - 5:00 PM' or 'Closed'",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "opening_hours_sunday",
                    models.CharField(
                        blank=True,
                        default="Closed",
                        help_text="e.g. '9:00 AM - 5:00 PM' or 'Closed'",
                        max_length=100,
                        null=True,
                    ),
                ),
                ("last_updated", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Site Settings",
                "verbose_name_plural": "Site Settings",
            },
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                (
                    "address_line_1",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "address_line_2",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("city", models.CharField(blank=True, max_length=50, null=True)),
                ("state", models.CharField(blank=True, max_length=50, null=True)),
                ("post_code", models.CharField(blank=True, max_length=20, null=True)),
                ("country", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "id_image",
                    models.FileField(blank=True, null=True, upload_to="user_ids/"),
                ),
                (
                    "international_id_image",
                    models.FileField(
                        blank=True, null=True, upload_to="user_ids/international/"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="core_user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="core_user_permissions_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="CustomerMotorcycle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("make", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
                ("year", models.IntegerField()),
                ("vin_number", models.CharField(blank=True, max_length=50, null=True)),
                (
                    "engine_number",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("rego", models.CharField(blank=True, max_length=20, null=True)),
                ("date_added", models.DateTimeField(auto_now_add=True)),
                ("odometer", models.IntegerField(blank=True, null=True)),
                (
                    "transmission",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("automatic", "Automatic"),
                            ("manual", "Manual"),
                            ("semi-auto", "Semi-Automatic"),
                        ],
                        help_text="Customer motorcycle transmission type",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="customer_motorcycles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Motorcycle",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("brand", models.CharField(max_length=100)),
                ("model", models.CharField(max_length=100)),
                ("year", models.IntegerField()),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Sale price (if applicable)",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "vin_number",
                    models.CharField(
                        blank=True,
                        help_text="Vehicle Identification Number",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "engine_number",
                    models.CharField(
                        blank=True,
                        help_text="Engine number/identifier",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "condition",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("new", "New"),
                            ("used", "Used"),
                            ("demo", "Demo"),
                            ("hire", "Hire"),
                        ],
                        max_length=20,
                    ),
                ),
                ("odometer", models.IntegerField(blank=True, null=True)),
                ("engine_size", models.CharField(max_length=50)),
                (
                    "seats",
                    models.IntegerField(help_text="Number of seats on the motorcycle"),
                ),
                (
                    "transmission",
                    models.CharField(
                        choices=[
                            ("automatic", "Automatic"),
                            ("manual", "Manual"),
                            ("semi-auto", "Semi-Automatic"),
                        ],
                        help_text="Motorcycle transmission type",
                        max_length=20,
                    ),
                ),
                ("description", models.TextField()),
                (
                    "image",
                    models.FileField(blank=True, null=True, upload_to="motorcycles/"),
                ),
                ("date_posted", models.DateTimeField(auto_now_add=True)),
                (
                    "is_available",
                    models.BooleanField(
                        default=True,
                        help_text="Is this bike generally available for sale or in the active hire fleet?",
                    ),
                ),
                (
                    "rego",
                    models.CharField(
                        blank=True,
                        help_text="Registration number",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "rego_exp",
                    models.DateField(
                        blank=True, help_text="Registration expiration date", null=True
                    ),
                ),
                (
                    "stock_number",
                    models.CharField(blank=True, max_length=50, null=True, unique=True),
                ),
                (
                    "daily_hire_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price per day for hiring (if applicable)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "weekly_hire_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price per week for hiring (if applicable)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "monthly_hire_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Price per month for hiring (if applicable)",
                        max_digits=8,
                        null=True,
                    ),
                ),
                (
                    "owner",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="owned_motorcycles",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "conditions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Select all applicable conditions (e.g., Used, Hire)",
                        related_name="motorcycles",
                        to="shop.motorcyclecondition",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HireBooking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "pickup_datetime",
                    models.DateTimeField(help_text="Pickup date and time"),
                ),
                (
                    "dropoff_datetime",
                    models.DateTimeField(help_text="Dropoff date and time"),
                ),
                (
                    "booked_daily_rate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "booked_weekly_rate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "booked_monthly_rate",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                ("total_price", models.DecimalField(decimal_places=2, max_digits=10)),
                (
                    "deposit_amount",
                    models.DecimalField(decimal_places=2, default=0, max_digits=8),
                ),
                (
                    "amount_paid",
                    models.DecimalField(decimal_places=2, default=0, max_digits=10),
                ),
                (
                    "payment_status",
                    models.CharField(
                        choices=[
                            ("unpaid", "Unpaid"),
                            ("deposit_paid", "Deposit Paid"),
                            ("paid", "Fully Paid"),
                            ("refunded", "Refunded"),
                        ],
                        default="unpaid",
                        max_length=20,
                    ),
                ),
                (
                    "booking_reference",
                    models.CharField(blank=True, max_length=20, unique=True),
                ),
                ("customer_notes", models.TextField(blank=True, null=True)),
                ("internal_notes", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("confirmed", "Confirmed"),
                            ("pending", "Pending"),
                            ("cancelled", "Cancelled"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("no_show", "No Show"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="hire_bookings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "motorcycle",
                    models.ForeignKey(
                        limit_choices_to={"conditions__name": "hire"},
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="hire_bookings",
                        to="shop.motorcycle",
                    ),
                ),
            ],
            options={
                "ordering": ["pickup_datetime", "motorcycle"],
            },
        ),
        migrations.CreateModel(
            name="MotorcycleImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("image", models.FileField(upload_to="motorcycles/additional/")),
                (
                    "motorcycle",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="shop.motorcycle",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ServiceBooking",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "customer_name",
                    models.CharField(
                        blank=True,
                        help_text="For anonymous bookings",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "customer_phone",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                (
                    "customer_email",
                    models.EmailField(blank=True, max_length=254, null=True),
                ),
                ("customer_address", models.TextField(blank=True, null=True)),
                (
                    "preferred_contact",
                    models.CharField(
                        blank=True,
                        choices=[("email", "Email"), ("phone", "Phone")],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "anon_vehicle_make",
                    models.CharField(
                        blank=True,
                        help_text="Vehicle Make for anonymous bookings",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "anon_vehicle_model",
                    models.CharField(
                        blank=True,
                        help_text="Vehicle Model for anonymous bookings",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "anon_vehicle_year",
                    models.IntegerField(
                        blank=True,
                        help_text="Vehicle Year for anonymous bookings",
                        null=True,
                    ),
                ),
                (
                    "anon_vehicle_rego",
                    models.CharField(
                        blank=True,
                        help_text="Vehicle Registration for anonymous bookings",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "anon_vehicle_odometer",
                    models.IntegerField(
                        blank=True,
                        help_text="Vehicle Odometer for anonymous bookings",
                        null=True,
                    ),
                ),
                (
                    "anon_vehicle_transmission",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("automatic", "Automatic"),
                            ("manual", "Manual"),
                            ("semi-auto", "Semi-Automatic"),
                        ],
                        help_text="Vehicle Transmission for anonymous bookings",
                        max_length=20,
                        null=True,
                    ),
                ),
                ("appointment_datetime", models.DateTimeField()),
                (
                    "customer_notes",
                    models.TextField(
                        blank=True, help_text="Notes from the customer", null=True
                    ),
                ),
                (
                    "mechanic_notes",
                    models.TextField(
                        blank=True, help_text="Notes from the mechanic", null=True
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("confirmed", "Confirmed"),
                            ("cancelled", "Cancelled"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("no_show", "No Show"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "booking_reference",
                    models.CharField(blank=True, max_length=20, null=True, unique=True),
                ),
                (
                    "parts_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "labor_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=8, null=True
                    ),
                ),
                (
                    "total_cost",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "customer",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="service_bookings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "vehicle",
                    models.ForeignKey(
                        blank=True,
                        help_text="Customer's motorcycle to be serviced (if linked to an account)",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="service_bookings",
                        to="shop.customermotorcycle",
                    ),
                ),
                (
                    "service_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="bookings",
                        to="shop.servicetype",
                    ),
                ),
            ],
        ),
    ]
